using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

using StateDict = System.Collections.Generic.Dictionary<string, GState>;

public class Agent : MonoBehaviour
{
    private readonly StateDict CurrentState = null;
    private GGoal CurrentGoal = new("none", -1, null);
    private List<GAction> Actions = null;
    private Queue<GAction> CurrentActions = new();
    private GAction CurrentAction = null;
    private List<GGoal> Goals = null;

    private List<GAction> GoalActions = null;

    public Agent()
    {
        CurrentState = GOAP.BaseDict;
    }

    public StateDict PullState()
    {
        return CurrentState;
    }

    private GGoal GetBestGoal()
    {
        GGoal best = CurrentGoal;

        foreach (GGoal goal in Goals)
        {
            if (goal.priority > best.priority && !goal.IsValid(CurrentState))
            {
                best = goal;
            }
        }

        return best;
    }

    private void Plan()
    {
        foreach (GAction action in Actions)
        {
            if (action.CheckPreconditions(CurrentState) && action.CheckEffect(CurrentGoal.desired_state))
            {
                CurrentActions.Enqueue(action);
            }
        }
    }

    // Update is called once per frame
    void Update()
    {
        GGoal new_goal = GetBestGoal();
        if (new_goal.name != CurrentGoal.name)
        {
            CurrentGoal = new_goal;
            // plan actions
            return;
        }

        if (CurrentAction.IsValid(CurrentState, CurrentGoal.desired_state))
        {
            CurrentAction.Perform();
        }
        else if (CurrentActions.Count > 0)
        {
            CurrentAction = CurrentActions.Dequeue();
        }
        else
        {
            Debug.Log("Plan finished!");

            if (!CurrentGoal.IsValid(CurrentState))
                CurrentGoal.priority = 0;
            else
                CurrentGoal.priority++;
        }
    }
}
